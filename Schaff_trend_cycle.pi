//@version=4
// Copyright (c) 2018-present, Alex Orekhov (everget)
// Schaff Trend Cycle script may be freely distributed under the MIT license.

// This study was originally based on Alex Orekhov's "Schaff Trend Cycle" written in Pine v3.  Here it has been updated to 4 with the following changes:
// * Labels have been added to the chart to mark BUY and SELL points, with the rule that there can only be one SELL followed by one BUY, and one BUY following one SELL.
// * The RED/ORANGE SELL labels show the last close and the percentag difference from the previous BUY (in parenthesis)
// * RED labels indicate a loss, ORABNGE labels indicate a gain
// * The GREEN SELL labls shows the last cloe and the running return on $100 percentags (in parenthesis)
// * Adjusts the EMA by adding the CCI, which improved returns by 8%
// * Limits the time period (adjustable), which in necessary for calculating returns
// * Adjutsable "max loss" used to determine the limits of the next SELL

study("Schaff Trend Cycle", shorttitle="STC", max_bars_back=10)


// https://www.tradingview.com/script/UkWZRgLG-Schaff-Trend-Cycle/

// -------------------------------------------------
// define functions
// -------------------------------------------------

lastVal(ary) =>
    float val = 0
    if array.size(ary) > 0
        val := array.pop(ary)//get the val
        array.push(ary, val)//replace it back on the stack    
    result=val

ilastVal(ary) =>
    int val = 0
    if array.size(ary) > 0
        val := array.pop(ary)//get the val
        array.push(ary, val)//replace it back on the stack    
    result=val
     
save(ary,s) => 
    array.push(ary, s)
 
getSdesc(state) =>
    string sdesc = na
    if state == 1
        sdesc:="ASKING-1"
    if state == 0
        sdesc:="BIDDING-0"
    rs=sdesc
    
pctFloat(n) => 
    nn = float(int(n*100))/100
    // sa = tostring(nn)+"%"
    
pltot(p) =>
    rs=array.sum(p)

//red dots
firstcrossunder(stc,upper) =>
    crossed = false
    if stc > upper and stc[1] <= upper
        crossed := true

//green dots
firstcrossover(stc,lower) =>
    crossed = false
    if stc < lower and stc[1] >= lower
        crossed:= true


    
// -------------------------------------------------
// Set and declase vars 
// -------------------------------------------------
fastLength = input(title="MACD Fast Length", type=input.integer, defval=23, minval=1)
slowLength = input(title="MACD Slow Length", type=input.integer, defval=50, minval=1)
cycleLength = input(title="Cycle Length", type=input.integer, defval=10, minval=1)
d1Length = input(title="1st %D Length", type=input.integer, defval=3, minval=1)
d2Length = input(title="2nd %D Length", type=input.integer, defval=3, minval=1)
upper = input(title="Upper", type=input.integer, defval=75, maxval=100)
lower = input(title="Lower", type=input.integer, defval=25, minval=0)
loss_limit = input(title="Loss Limit %", type=input.float, step=0.1, defval=10, minval=0)
src = input(title="Source", type=input.source, defval=close)
unitsBack = input(title="Days to Study", type=input.integer, defval=30, minval=1)
highlightBreakouts = input(title="Highlight Breakouts ?", type=input.bool, defval=true)


string sdesc = na

// -------------------------------------------------
// Generate data, but limit to date range back from present
// -------------------------------------------------
targetDate = time >= timestamp(year(timenow), month(timenow), dayofmonth(timenow) - unitsBack, hour(timenow), minute(timenow), second(timenow))
beginDate = not targetDate[1] and targetDate

var float valueToPlot = na
if beginDate
    valueToPlot := src
    
src1 = valueToPlot


macd = ema(src1, fastLength) - ema(src, slowLength)     // we start with the MACD
k = nz(fixnan(stoch(macd, macd, macd, cycleLength)))    
d = ema(k, d1Length) + rsi(src, slowLength)
kd = nz(fixnan(stoch(d, d, d, cycleLength)))
stc = ema(kd, d2Length)
stc := 	stc > 100 ? 100 : stc < 0 ? 0 : stc

stcColor = not highlightBreakouts ? (stc > stc[1] ? color.green : color.red) : #ff3013
stcPlot = plot(stc, title="STC", color=stcColor, transp=0)

// -------------------------------------------------
// Tracking vars
// -------------------------------------------------

label sell_lbl = na
label buy_lbl  = na
float rt       = 0
float profit_loss  = na

sell_tr = false
buy_tr = false

// creat arrays to store last trigger values

float   lastBuy     = 0
float   lastSell    = 0
bool    dup         = false
float   limit_price = na
float   pflt        = na
var     lastBuyAry  = array.new_float(0)
var     lastSellAry = array.new_float(0)
var     profit_lossAry = array.new_float(0)

// create an var to store the current state

var int iState = na //0=bidding, 1=asking
var stateAry = array.new_int(0)



timeToSell = false
timeToBuy = false

// Here is where the processing begins

timeToSell := crossunder(stc, upper) //RED - trailing edge leading edge as it crosses under the upper
timeToBuy := firstcrossover(stc, lower) //GREEN - leading edge as it leaves the upper limit


// ------------------------------------------------
// GREEN DOT
// ------------------------------------------------
// places green dot on leading edge as it leaves the lower limit
plotshape(timeToBuy ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)

// tailing edge as it crosses below the upper limit
//plotshape(firstcrossover(stc, lower) ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)

iState := ilastVal(stateAry)

// -------------------------------------------------
// GREEN MARKERS
// -------------------------------------------------
if timeToBuy and iState == 1
    rt := pltot(profit_lossAry)
    //txt = tostring(close)
    txt = tostring(close)+"\n("+tostring(rt)+"%)"
    buy_lbl := label.new(bar_index, high, text = txt, style = label.style_label_up, color = color.green, size = size.normal)
    label.set_xy(buy_lbl, bar_index, 0)
    save(lastBuyAry, close)
    save(stateAry,0)    // set to ASKING (0) 
    iState := 0
// -------------------------------------------------
// ORANGE/RED MARKERS
// -------------------------------------------------
lastBuy:=lastVal(lastBuyAry)                                        // GET THE LAST PRICE PAID
profit_loss := close - lastBuy                                      // calc if we made or lost on this move
limit_price := (lastBuy*(1-(loss_limit/100)))


if timeToSell and iState == 0 and (close > limit_price )

    pflt:= pctFloat(((close-lastBuy)/close)*100)                          // get percentage
    save(profit_lossAry,pflt)
    txt = tostring(close)+"\n("+tostring(pflt)+"%)"                                
    profit_loss_clr = profit_loss < 0.0 ? color.red : color.orange      // RED=loss
    sell_lbl := label.new(bar_index, high, text = txt, style = label.style_label_down, color = profit_loss_clr, size = size.normal)
    label.set_xy(sell_lbl, bar_index, 100)
    save(lastSellAry,close)    
    save(stateAry,1)    // set to BIDDING (1)
    iState := 1

    
// -------------------------------------------------
// debug output to data windows
// -------------------------------------------------
if array.size(lastBuyAry) > 1
    lastBuy := lastVal(lastBuyAry) 
    lastSell := lastVal(lastSellAry) 

plotchar(lastSell, "lastSELL", "", location = location.top)
plotchar(lastBuy, "lastBUY", "", location = location.top)
plotchar(iState, "iState", "", location = location.top)
plotchar(pflt, "===pflt", "", location = location.top)
plotchar(close, "close", "", location = location.top)
plotchar(limit_price, "Limit_price", "", location = location.top)
plotchar(rt, "rt", "", location = location.top)

// ------------------------------------------------
// Draw chart and lines
// ------------------------------------------------
transparent = color.new(color.red,100)

// thee just enlarge teh scale so the labels don't get cropped
hline(-50, title="Bottom exp", color=transparent, linestyle=hline.style_dashed)
hline(180, title="Bottom exp", color=transparent, linestyle=hline.style_dashed)


upperLevel  = plot(upper, title="Upper", color=color.gray)
hline(50, title="Middle", color=color.gray, linestyle=hline.style_dashed)
lowerLevel = plot(lower, title="Lower", color=color.gray)
fill(upperLevel, lowerLevel, color=#f9cb9c, transp=90)
upperFillColor = stc > upper and highlightBreakouts ? color.red : transparent
lowerFillColor = stc < lower and highlightBreakouts ? color.green : transparent
fill(upperLevel, stcPlot, color=upperFillColor, transp=80)
fill(lowerLevel, stcPlot, color=lowerFillColor, transp=80)

// ------------------------------------------------
// Plot data
// ------------------------------------------------

// ------------------------------------------------
// RED DOT
// ------------------------------------------------
// leading edge as it leaves the upper limit
// plotshape(firstcrossunder(stc, upper) ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

// trailing edge leading edge as it crosses under the upper
// plotshape(crossunder(stc, upper) ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)
plotshape(timeToSell ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

 
// ------------------------------------------------
// GREEN DOT
// ------------------------------------------------
// places green dot on leading edge as it leaves the lower limit
plotshape(timeToBuy ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)

// tailing edge as it crosses below the upper limit
//plotshape(firstcrossover(stc, lower) ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)


