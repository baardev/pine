//@version=4
study(title="test", shorttitle="tests", overlay=false)


// ————— When scale of signal to rescale is known.
rescale(_src, _oldMin, _oldMax, _newMin, _newMax) =>
    // Rescales series with known min/max.
    // _src: series to rescale.
    // _oldMin: minimum value of series to rescale.
    // _oldMax: maximum value of series to rescale.
    // _newMin: minimum value of rescaled series.
    // _newMax: maximum value of rescaled series.
    _newMin + (_newMax - _newMin) * (_src - _oldMin) / max(_oldMax - _oldMin, 10e-10)

// ————— Normalize Function when min/max unknown
normalize(_src, _min, _max) => 
    // Normalizes series with unknown min/max using historical min/max.
    // _src: series to rescale.
    // _min: minimum value of rescaled series.
    // _max: maximum value of rescaled series.
    var _historicMin = +10e10
    var _historicMax = -10e10
    _historicMin := min(nz(_src, _historicMin), _historicMin)
    _historicMax := max(nz(_src, _historicMax), _historicMax)
    _min + (_max - _min) * (_src - _historicMin) / max(_historicMax - _historicMin, 10e-10)

// ————— 
qnorm(_src, _min, _max,len) => 
    var _hMin = 10e10
    var _hMax = -10e10
	s_src = ema(_src,len)
    _hMin := min(nz(s_src, _hMin), _hMin)
    _hMax := max(nz(s_src, _hMax), _hMax)
    _min + (_max - _min) * (s_src - _hMin) / max(_hMax - _hMin, _hMin)

// ————— 
proc(_src,len,hi,lo) =>
    x=ema(_src,len)
    y=ema(x,len)
    z=ema(y,len)
	a=qnorm(x,0,1,len)
//	a=normalize(z,0,100)
//	b=rescale(rsi(a, 14), 0, 100, -100, 100), color = color.fuchsia)
	b=rescale(rsi(a, 14), lowest(a,len), highest(a,len), 0, 100)


// ————— 
len = input(title="Length", type=input.integer, defval=5)
showV= input(title="Show V (blue - hi/lo delta)?", type=input.bool, defval=true)
showI= input(title="Show I (red - volume)?", type=input.bool, defval=true)
showR= input(title="Show R (green - balanced price)?", type=input.bool, defval=true)
showP= input(title="Show P (yellow - 'power')?", type=input.bool, defval=true)

//V=close-open
V=high-low
I=volume
R=V/I
P=I*I*R

Vhi=highest(ema(high,len),len)
Vlo=lowest(ema(low,len),len)
Ihi=highest(ema(I,len),len)
Ilo=lowest(ema(I,len),len)
Rhi=highest(ema(R,len),len)
Rlo=lowest(ema(R,len),len)
Phi=highest(ema(P,len),len)
Plo=lowest(ema(P,len),len)

mV=proc(V,len,Vhi,Vlo)
mI=proc(I,len,Ihi,Ilo)
mR=proc(R,len,Rhi,Rlo)
mP=proc(P,len,Phi,Plo)

// ————— 
plot(series=mV, style=plot.style_line, linewidth=2, color=iff(showV,color.blue,na))
plot(series=mI, style=plot.style_line, linewidth=2, color=iff(showI,color.red,na))
plot(series=mR, style=plot.style_line, linewidth=2, color=iff(showR,color.green,na))
plot(series=mP, style=plot.style_line, linewidth=2, color=iff(showP,color.yellow,na))



// plotchar(bar_index, "Bar Index1", "", location = location.top)
// plotchar(Vhi, "Vhi")
// plotchar(Vlo, "Vlo")
// plotchar(mV, "mV")


// x = bar_index
// y = close
// txt = tostring(mV)
// label.new(x, mV, txt) // print value of close
// label.new(bar_index, high, text='A', style=label.style_triangledown)




